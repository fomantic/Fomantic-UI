/*!
 * # Fomantic-UI - Step
 * https://github.com/fomantic/Fomantic-UI/
 *
 *
 * Released under the MIT license
 * https://opensource.org/licenses/MIT
 *
 */

/*******************************
             Step
*******************************/

/* --------------
   Load Theme
--------------- */

@type: "element";
@element: "step";

@import (multiple) "../../theme.config";

/*******************************
            Plural
*******************************/

.ui.steps:not(.railing) {
    display: inline-flex;
    flex-direction: row;
    align-items: stretch;
    margin: @stepMargin;
    background: @stepsBackground;
    box-shadow: @stepsBoxShadow;
    line-height: @lineHeight;
    border-radius: @stepsBorderRadius;
    border: @stepsBorder;
}
.ui.steps:not(.unstackable) {
    flex-wrap: wrap;
}

/* First Steps */
.ui.steps:first-child {
    margin-top: 0;
}

/* Last Steps */
.ui.steps:last-child {
    margin-bottom: 0;
}

/*******************************
           Singular
*******************************/

.ui.steps:not(.circular) .step {
    position: relative;
    display: flex;
    flex: 1 0 auto;
    flex-flow: row wrap;
    vertical-align: middle;
    align-items: center;
    justify-content: @justifyContent;
    margin: @verticalMargin @horizontalMargin;
    padding: @verticalPadding @horizontalPadding;
    background: @background;
    color: @textColor;
    box-shadow: @boxShadow;
    border-radius: @borderRadius;
    border: @border;
    border-right: @divider;
    transition: @transition;
}

/* Arrow */
.ui.steps:not(.circular) .step::after {
    display: none;
    position: absolute;
    z-index: 2;
    content: "";
    top: @arrowTopOffset;
    right: @arrowRightOffset;
    background-color: @arrowBackgroundColor;
    width: @arrowSize;
    height: @arrowSize;
    border-style: solid;
    border-color: @borderColor;
    border-width: @arrowBorderWidth;
    transition: @transition;
    transform: translateY(-50%) translateX(50%) rotate(-45deg);
}

/* First Step */
.ui.steps:not(.circular) .step:first-child {
    padding-left: @horizontalPadding;
    border-radius: @stepsBorderRadius 0 0 @stepsBorderRadius;
}

/* Last Step */
.ui.steps:not(.circular) .step:last-child {
    border-radius: 0 @stepsBorderRadius @stepsBorderRadius 0;
    border-right: none;
    margin-right: 0;
}

/* Only Step */
.ui.steps:not(.circular) .step:only-child {
    border-radius: @stepsBorderRadius;
}

/*******************************
            Content
*******************************/

/* Title */
.ui.steps .step .title {
    font-family: @titleFontFamily;
    font-size: @titleFontSize;
    font-weight: @titleFontWeight;
    line-height: @lineHeight;
}
.ui.steps .step > .title {
    width: 100%;
}

/* Description */
.ui.steps .step .description {
    font-weight: @descriptionFontWeight;
    font-size: @descriptionFontSize;
    color: @descriptionColor;
    line-height: @lineHeight;
}
.ui.steps .step > .description {
    width: 100%;
}
.ui.steps .step .title ~ .description {
    margin-top: @descriptionDistance;
}

/* Icon */
.ui.steps .step > i.icon {
    line-height: 1;
    font-size: @iconSize;
    margin: 0 @iconDistance 0 0;
}
.ui.steps .step > i.icon,
.ui.steps .step > i.icon ~ .content {
    display: block;
    flex: 0 1 auto;
    align-self: @iconAlign;
}

/* Horizontal Icon */
.ui.steps:not(.vertical) .step > i.icon {
    width: auto;
}

/* Link */
.ui.steps .link.step,
.ui.steps a.step {
    cursor: pointer;
}

/*******************************
            Types
*******************************/

& when (@variationCircularSteps) {
    .ui.circular.steps {
        border: 0;
        border-radius: 0;
        box-shadow: none;

        &:not(.vertical) {
            background: transparent;
            border: 0;
            border-radius: 0;
            box-shadow: none;
            position: relative;
            display: flex;
            padding: @circularStepsMargin;
            margin: @circularStepsPadding;

            & .step {
                background: @circularStepColor;
                cursor: default;
                height: @circularStepBorderWidth;
                display: flex;
                flex-wrap: wrap;
                align-items: center;
                flex: 1;
                position: relative;
                margin-left: @circularStepLineMargin;

                &::before {
                    left: -@circularStepLineMargin;
                }
                &::after {
                    left: @circularStepIconDistance;
                }

                &.link ::before,
                &.link ::after {
                    cursor: pointer;
                }
                &.active,
                &.completed {
                    background: @circularStepCompletedBackground;
                }
                &.completed::after {
                    left: calc(-@circularStepLineMargin + (calc((@circularStepLineMargin / 2) / 2)));
                }
                &:last-child {
                    flex: 0;
                }
            }
        }

        & .step {
            color: inherit;

            &::before {
                content: "";
                border-radius: 50%;
                border: @circularStepBorder;
                height: @circularStepRingSize;
                width: @circularStepRingSize;
                line-height: @circularStepRingSize;
                position: absolute;
            }
            &::after {
                content: "";
                display: block;
                position: absolute;
                border-radius: 50%;
                background: @circularStepColor;
                height: @circularStepIconSize;
                width: @circularStepIconSize;
            }
            &.link::before,
            &.link::after {
                cursor: pointer;
            }
            &.active {
                &::before {
                    border-color: @circularStepActiveColor;
                }

                &::after {
                    background: @circularStepActiveColor;
                }
                & .title {
                    color: @circularStepActiveColor;
                }
            }
            &.completed {
                &::before {
                    background: @circularStepCompletedBackground;
                    border-color: @circularStepCompletedBackground;
                }
                &::after {
                    background: transparent;
                    content: "\e800";
                    font-family: Step;
                    color: @circularStepCompletedColor;
                    left: @circularStepCompletedIconDistance;
                    height: auto;
                    line-height: @circularStepCompletedIconLineHeight;
                }
            }
        }
    }
}

& when (@variationStepOrdered) {
    /* --------------
         Ordered
    --------------- */

    .ui.ordered.steps {
        counter-reset: ordered;
    }
    .ui.ordered.steps .step::before {
        text-align: center;
        content: counter(ordered);
        align-self: @iconAlign;
        counter-increment: ordered;
        font-family: @orderedFontFamily;
        font-weight: @orderedFontWeight;
    }
    .ui.ordered.steps:not(.circular) .step::before {
        display: block;
        position: static;
        font-size: @iconSize;
        margin-right: @iconDistance;
    }

    & when (@variationCircularSteps) {
        .ui.circular.ordered.steps .step {
            &::before {
                line-height: calc(@circularStepRingSize - @circularStepBorderWidth);
            }
            &.completed::before {
                content: "";
            }
            &::after {
                background: transparent;
            }
            &.active::before {
                color: @circularStepActiveColor;
            }
        }
    }

    .ui.ordered.steps .step > * {
        display: block;
        align-self: @iconAlign;
    }
}

& when (@variationStepVertical) {
    /* --------------
        Vertical
    --------------- */

    .ui.vertical.steps:not(.circular) {
        display: inline-flex;
        flex-direction: column;
        overflow: visible;
    }
    .ui.vertical.steps:not(.circular) .step {
        justify-content: flex-start;
        border-radius: @borderRadius;
        padding: @verticalPadding @horizontalPadding;
        border-right: none;
        border-bottom: @verticalDivider;
    }
    .ui.vertical.steps:not(.circular) .step:first-child {
        padding: @verticalPadding @horizontalPadding;
        border-radius: @stepsBorderRadius @stepsBorderRadius 0 0;
    }
    .ui.vertical.steps:not(.circular) .step:last-child {
        border-bottom: none;
        border-radius: 0 0 @stepsBorderRadius @stepsBorderRadius;
    }
    .ui.vertical.steps:not(.circular) .step:only-child {
        border-radius: @stepsBorderRadius;
    }

    /* Arrow */
    .ui.vertical.steps:not(.circular) .step::after {
        top: @verticalArrowTopOffset;
        right: @verticalArrowRightOffset;
        border-width: @verticalArrowBorderWidth;
        display: @verticalArrowDisplay;
    }
    .ui.right.vertical.steps:not(.circular) .step::after {
        border-width: @verticalLeftArrowBorderWidth;
        left: @verticalLeftArrowLeftOffset;
        right: @verticalLeftArrowRightOffset;
        transform: translateY(-50%) translateX(-50%) rotate(-45deg);
    }

    .ui.vertical.steps:not(.circular) .active.step::after {
        display: @verticalActiveArrowDisplay;
    }
    .ui.vertical.steps:not(.circular) .step:last-child::after {
        display: @verticalLastArrowDisplay;
    }
    .ui.vertical.steps:not(.circular) .active.step:last-child::after {
        display: @verticalActiveLastArrowDisplay;
    }

    /* Circular Step */
    & when (@variationCircularSteps) {
        .ui.circular.vertical.steps {
            display: inline-flex;
            flex-flow: column wrap;
            align-items: flex-start;

            & .step {
                position: relative;
                width: 100%;

                &::before {
                    left: 0;
                    top: 0;
                }

                &::after {
                    left: @verticalCircularStepIconDistance;
                    top: @verticalCircularStepIconDistance;
                }

                & .content {
                    padding-left: @verticalCircularStepContentPadding;
                }

                &:not(:last-child) {
                    padding-bottom: @verticalCircularStepPadding;

                    & .content::before {
                        content: "";
                        position: absolute;
                        border-left: @circularStepBorder;
                        top: @circularStepLineMargin;
                        bottom: 0;
                        left: @verticalCircularStepLineDistance;
                    }
                }

                &.active .content::before,
                &.completed .content::before {
                    border-color: @circularStepCompletedBackground;
                }

                &.completed::before {
                    background: @circularStepCompletedBackground;
                    border-color: @circularStepCompletedBackground;
                }
                &.completed::after {
                    top: @verticalCircularStepCompletedIconDistance;
                }
            }
        }
    }
}

/* ---------------
    Responsive
---------------- */

/* Mobile (Default) */
@media only screen and (max-width: (@largestMobileScreen)) {
    .ui.steps:not(.unstackable):not(.circular) {
        display: inline-flex;
        overflow: visible;
        flex-direction: column;
    }
    .ui.steps:not(.unstackable):not(.circular) .step {
        width: 100% !important;
        flex-direction: column;
        border-radius: @borderRadius;
        padding: @verticalPadding @horizontalPadding;
        border-right: none;
        border-bottom: @stepsBorder;
    }
    .ui.steps:not(.unstackable):not(.circular) .step:first-child {
        padding: @verticalPadding @horizontalPadding;
        border-radius: @stepsBorderRadius @stepsBorderRadius 0 0;
    }
    .ui.steps:not(.unstackable):not(.circular) .step:last-child {
        border-radius: 0 0 @stepsBorderRadius @stepsBorderRadius;
        border-bottom: none;
    }

    /* Arrow */
    .ui.steps:not(.unstackable):not(.circular) .step::after {
        top: unset;
        bottom: -@arrowSize;
        right: 50%;
        transform: translateY(-50%) translateX(50%) rotate(45deg);
    }
    & when (@variationStepVertical) {
        .ui.vertical.steps:not(.circular) .active.step:last-child::after {
            display: none;
        }
    }

    /* Content */
    .ui.steps:not(.unstackable):not(.circular) .step .content {
        text-align: center;
    }

    /* Icon */
    .ui.steps:not(.unstackable):not(.circular) .step > i.icon,
    .ui.ordered.steps:not(.unstackable):not(.circular) .step::before {
        margin: 0 0 @mobileIconDistance 0;
    }
}

/*******************************
             States
*******************************/

/* Link Hover */
.ui.steps:not(.circular) .link.step:hover::after,
.ui.steps:not(.circular) .link.step:hover,
.ui.steps:not(.circular) a.step:hover::after,
.ui.steps:not(.circular) a.step:hover {
    background: @hoverBackground;
    color: @hoverColor;
}

/* Link Down */
.ui.steps:not(.circular) .link.step:active::after,
.ui.steps:not(.circular) .link.step:active,
.ui.steps:not(.circular) a.step:active::after,
.ui.steps:not(.circular) a.step:active {
    background: @downBackground;
    color: @downColor;
}

/* Active */
.ui.steps:not(.circular) .step.active {
    cursor: auto;
    background: @activeBackground;
}
.ui.steps:not(.circular) .step.active::after {
    background: @activeBackground;
}
.ui.steps:not(.circular) .step.active .title {
    color: @activeColor;
}
.ui.ordered.steps .step.active::before,
.ui.steps .active.step i.icon {
    color: @activeIconColor;
}

/* Active Arrow */
.ui.steps:not(.circular) .step::after {
    display: @arrowDisplay;
}
.ui.steps:not(.circular) .active.step::after {
    display: @activeArrowDisplay;
}
.ui.steps:not(.circular) .step:last-child::after {
    display: @lastArrowDisplay;
}
.ui.steps:not(.circular) .active.step:last-child::after {
    display: @activeLastArrowDisplay;
}

/* Active Hover */
.ui.steps:not(.circular) .link.active.step:hover::after,
.ui.steps:not(.circular) .link.active.step:hover,
.ui.steps:not(.circular) a.active.step:hover::after,
.ui.steps:not(.circular) a.active.step:hover {
    cursor: pointer;
    background: @activeHoverBackground;
    color: @activeHoverColor;
}

/* Completed */
.ui.steps .step.completed > i.icon::before,
.ui.ordered.steps .step.completed::before {
    color: @completedColor;
}

& when (@variationStepDisabled) {
    /* Disabled */
    .ui.steps:not(.circular) .disabled.step {
        cursor: auto;
        background: @disabledBackground;
        pointer-events: none;
    }
    .ui.steps:not(.circular) .disabled.step,
    .ui.steps:not(.circular) .disabled.step .title,
    .ui.steps:not(.circular) .disabled.step .description {
        color: @disabledColor;
    }
    .ui.steps:not(.circular) .disabled.step::after {
        background: @disabledBackground;
    }
    .ui.circular.steps .disabled.step {
        cursor: auto;
        opacity: @circularStepDisabledItemOpacity;

        &::before,
        &::after {
            cursor: auto;
        }
    }
}

/*******************************
           Variations
*******************************/

& when (@variationStepStackable) {
    /* --------------
       Stackable
    --------------- */

    /* Tablet Or Below */
    @media only screen and (max-width: @largestTabletScreen) {
        .ui[class*="tablet stackable"].steps:not(.circular) {
            display: inline-flex;
            overflow: visible;
            flex-direction: column;
        }

        /* Steps */
        .ui[class*="tablet stackable"].steps:not(.circular) .step {
            flex-direction: column;
            border-radius: @borderRadius;
            padding: @verticalPadding @horizontalPadding;
            border-right: none;
            border-bottom: @stepsBorder;
        }
        .ui[class*="tablet stackable"].steps:not(.circular) .step:first-child {
            padding: @verticalPadding @horizontalPadding;
            border-radius: @stepsBorderRadius @stepsBorderRadius 0 0;
        }
        .ui[class*="tablet stackable"].steps:not(.circular) .step:last-child {
            border-radius: 0 0 @stepsBorderRadius @stepsBorderRadius;
            border-bottom: none;
        }

        /* Arrow */
        .ui[class*="tablet stackable"].steps:not(.circular) .step::after {
            top: unset;
            bottom: -@arrowSize;
            right: 50%;
            transform: translateY(-50%) translateX(50%) rotate(45deg);
        }

        /* Content */
        .ui[class*="tablet stackable"].steps:not(.circular) .step .content {
            text-align: center;
        }

        /* Icon */
        .ui[class*="tablet stackable"].steps .step > i.icon,
        .ui[class*="tablet stackable"].ordered.steps .step::before {
            margin: 0 0 @mobileIconDistance 0;
        }
    }
}

& when (@variationStepFluid) {
    /* --------------
          Fluid
    --------------- */

    /* Fluid */
    .ui.fluid.steps {
        display: flex;
        width: 100%;
    }
}

& when (@variationStepAttached) {
    /* --------------
        Attached
    --------------- */

    /* Top */
    .ui.attached.steps:not(.circular) {
        width: @attachedWidth !important;
        margin: 0 @attachedHorizontalOffset @attachedVerticalOffset;
        max-width: @attachedWidth;
        border-radius: @stepsBorderRadius @stepsBorderRadius 0 0;
    }
    .ui.attached.steps:not(.circular) .step:first-child {
        border-radius: @stepsBorderRadius 0 0 0;
    }
    .ui.attached.steps:not(.circular) .step:last-child {
        border-radius: 0 @stepsBorderRadius 0 0;
    }

    /* Bottom */
    .ui.bottom.attached.steps:not(.circular) {
        margin: @attachedVerticalOffset @attachedHorizontalOffset 0;
        border-radius: 0 0 @stepsBorderRadius @stepsBorderRadius;
    }
    .ui.bottom.attached.steps:not(.circular) .step:first-child {
        border-radius: 0 0 0 @stepsBorderRadius;
    }
    .ui.bottom.attached.steps:not(.circular) .step:last-child {
        border-radius: 0 0 @stepsBorderRadius 0;
    }
}

& when (@variationStepEqualWidth) {
    /* -------------------
        Evenly Divided
    -------------------- */

    .ui.one.steps:not(.circular),
    .ui.two.steps:not(.circular),
    .ui.three.steps:not(.circular),
    .ui.four.steps:not(.circular),
    .ui.five.steps:not(.circular),
    .ui.six.steps:not(.circular),
    .ui.seven.steps:not(.circular),
    .ui.eight.steps:not(.circular) {
        width: 100%;
    }
    .ui.one.steps:not(.circular) > .step,
    .ui.two.steps:not(.circular) > .step,
    .ui.three.steps:not(.circular) > .step,
    .ui.four.steps:not(.circular) > .step,
    .ui.five.steps:not(.circular) > .step,
    .ui.six.steps:not(.circular) > .step,
    .ui.seven.steps:not(.circular) > .step,
    .ui.eight.steps:not(.circular) > .step {
        flex-wrap: nowrap;
    }
    .ui.one.steps:not(.circular) > .step {
        width: 100%;
    }
    .ui.two.steps:not(.circular) > .step {
        width: 50%;
    }
    .ui.three.steps:not(.circular) > .step {
        width: 33.333%;
    }
    .ui.four.steps:not(.circular) > .step {
        width: 25%;
    }
    .ui.five.steps:not(.circular) > .step {
        width: 20%;
    }
    .ui.six.steps:not(.circular) > .step {
        width: 16.666%;
    }
    .ui.seven.steps:not(.circular) > .step {
        width: 14.285%;
    }
    .ui.eight.steps:not(.circular) > .step {
        width: 12.5%;
    }
}

/* -------------------
       Sizes
-------------------- */

.ui.steps .step,
.ui.step {
    font-size: @medium;
}
& when not (@variationStepSizes = false) {
    each(@variationStepSizes, {
        @s: @@value;

        .ui.@{value}.steps .step,
        .ui.@{value}.step {
            font-size: @s;
        }

        .ui.@{value}.circular.steps:not(.vertical) {
            margin: @s 0;
            padding: @s 0;
        }
    });
}

& when (@variationStepInverted) {
    /* --------------
        Inverted
    --------------- */

    .ui.inverted.steps:not(.circular) {
        border: 1px solid @solidWhiteBorderColor;
    }

    .ui.inverted.steps:not(.circular) .step {
        color: @invertedTextColor;
        background: @black;
        border-color: @solidWhiteBorderColor;
    }

    .ui.inverted.steps:not(.circular) .step::after {
        background-color: @black;
        border-color: @solidWhiteBorderColor;
    }

    .ui.inverted.steps .step .description {
        color: @invertedTextColor;
    }

    /* Active */
    .ui.inverted.steps:not(.circular) .step.active,
    .ui.inverted.steps:not(.circular) .step.active::after {
        background: @invertedActiveBackground;
    }
    .ui.inverted.ordered.steps:not(.circular) .step.active::before,
    .ui.inverted.steps:not(.circular) .active.step i.icon {
        color: @invertedSelectedTextColor;
    }

    & when (@variationStepDisabled) {
        /* Disabled */
        .ui.inverted.steps:not(.circular) .disabled.step,
        .ui.inverted.steps:not(.circular) .disabled.step::after {
            background: @invertedDisabledBackground;
        }
        .ui.inverted.steps:not(.circular) .disabled.step,
        .ui.inverted.steps:not(.circular) .disabled.step .title,
        .ui.inverted.steps:not(.circular) .disabled.step .description {
            color: @invertedDisabledTextColor;
        }
    }

    /* Link Hover */
    .ui.inverted.steps:not(.circular) .link.step:hover::after,
    .ui.inverted.steps:not(.circular) .link.step:hover,
    .ui.inverted.steps:not(.circular) a.step:hover::after,
    .ui.inverted.steps:not(.circular) a.step:hover {
        background: @invertedHoverBackground;
        color: @invertedHoveredTextColor;
    }

    /* Link Down */
    .ui.inverted.steps:not(.circular) .link.step:active::after,
    .ui.inverted.steps:not(.circular) .link.step:active,
    .ui.inverted.steps:not(.circular) a.step:active::after,
    .ui.inverted.steps:not(.circular) a.step:active {
        background: @invertedActiveHoverBackground;
        color: @invertedPressedTextColor;
    }

    /* Circular Step */
    .ui.inverted.circular.steps {
        & .step .content {
            color: @invertedTextColor;
        }

        &:not(.vertical) {
            & .step:not(.active):not(.completed) {
                background: @invertedTextColor;

                &::before {
                    border-color: @invertedTextColor;
                }
            }
        }
        &:not(.ordered) .step:not(.active):not(.completed)::after {
            background: @invertedTextColor;
        }

        & when (@variationStepVertical) {
            &.vertical {
                & .step:not(.active):not(.completed) {
                    &::before {
                        border-color: @invertedTextColor;
                    }
                    & .content::before {
                        background: @invertedTextColor;
                    }
                }
            }
        }
    }
}

& when not (@variationStepColors = false) {
    each(@variationStepColors, {
        @variation: @value;
        @color: @colors[@@variation][color];

        .ui.circular.steps .step.@{variation} {
            &::before {
                border-color: @color;
            }
            &::after {
                background: @color;
            }
        }
        .ui.@{variation}.circular.steps .step, .ui.circular.steps .step.@{variation} {
            &.active::before {
                border-color: @color;
            }
            &.active::after {
                background: @color;
            }
            &.completed::before {
                background: @color;
                border-color: @color;
            }
        }
        .ui.@{variation}.circular.steps:not(.vertical) .step, .ui.circular.steps:not(.vertical) .step.@{variation} {
            &.active, &.completed {
                background: @color;
            }
        }
        .ui.circular.steps:not(.vertical) .step.@{variation} {
            background: @color;
        }

        & when (@variationStepVertical) {
            .ui.vertical.circular.steps .step.@{variation} .content::before {
                border-color: @color;
            }
            .ui.@{variation}.vertical.circular.steps .step, .ui.vertical.circular.steps .step.@{variation} {
                &.active .content .title {
                    color: @color;
                }
                &.active .content::before {
                    border-color: @color;
                }
                &.completed .content::before {
                    border-color: @color;
                }
            }
        }

        & when (@variationStepOrdered) {
            .ui.@{variation}.circular.ordered.steps .step, .ui.circular.ordered.steps .step.@{variation} {
                &::after {
                    background: transparent;
                }
                &.active::before {
                    color: @color;
                }
            }
        }
    });
}

// stylelint-disable no-invalid-position-at-import-rule
@import (multiple, optional) "../../overrides.less";
